// Code generated by protoc-gen-protogin. DO NOT EDIT.

package testpb

import "context"
import "github.com/gin-gonic/gin"
import "github.com/ozouai/protogin/protogingen"
import "github.com/ozouai/protogin/protoginctx"
import "github.com/ozouai/protogin"
import "github.com/golang/protobuf/jsonpb"

type TestService_GinHandler interface {
	First() FirstHandler
	Second() SecondHandler
	SecondPost() SecondPostHandler
}
type FirstHandler struct {
	Middleware protogin.MiddlewareList
	Handler    func(context.Context, *FirstRequest) (*FirstResponse, error)
}
type SecondHandler struct {
	Middleware protogin.MiddlewareList
	Handler    func(context.Context, *SecondRequest) (*SecondResponse, error)
}
type SecondPostHandler struct {
	Middleware protogin.MiddlewareList
	Handler    func(context.Context, *SecondRequest) (*SecondResponse, error)
}

func NewTestServiceGinServer(handler TestService_GinHandler, engine *gin.Engine) {
	{
		declaration := handler.First()
		f := declaration.Handler
		middleware := declaration.Middleware
		engine.GET("/first", func(ginCtx *gin.Context) {
			var err error
			mainCtx := ginCtx.Request.Context()
			reqCtx := context.WithValue(mainCtx, protoginctx.GinCtxKey, ginCtx)
			request := &FirstRequest{}
			var responseString string
			err = protogingen.ApplyMiddlewareList(reqCtx, middleware, func(ctx context.Context) error {
				response, err := f(ctx, request)
				if err != nil {
					return err
				}
				responseString, err = (&jsonpb.Marshaler{}).MarshalToString(response)
				if err != nil {
					return err
				}
				return nil
			})
			if err != nil {
				ginCtx.AbortWithError(500, err)
				return
			}
			ginCtx.Status(200)
			ginCtx.Writer.WriteString(responseString)
		})
	}
	{
		declaration := handler.Second()
		f := declaration.Handler
		middleware := declaration.Middleware
		engine.GET("/second/:id", func(ginCtx *gin.Context) {
			var err error
			mainCtx := ginCtx.Request.Context()
			reqCtx := context.WithValue(mainCtx, protoginctx.GinCtxKey, ginCtx)
			request := &SecondRequest{}
			var responseString string
			request.Id = ginCtx.Param("id")
			err = protogingen.ApplyMiddlewareList(reqCtx, middleware, func(ctx context.Context) error {
				response, err := f(ctx, request)
				if err != nil {
					return err
				}
				responseString, err = (&jsonpb.Marshaler{}).MarshalToString(response)
				if err != nil {
					return err
				}
				return nil
			})
			if err != nil {
				ginCtx.AbortWithError(500, err)
				return
			}
			ginCtx.Status(200)
			ginCtx.Writer.WriteString(responseString)
		})
	}
	{
		declaration := handler.SecondPost()
		f := declaration.Handler
		middleware := declaration.Middleware
		engine.POST("/second/:id", func(ginCtx *gin.Context) {
			var err error
			mainCtx := ginCtx.Request.Context()
			reqCtx := context.WithValue(mainCtx, protoginctx.GinCtxKey, ginCtx)
			request := &SecondRequest{}
			var responseString string
			err = jsonpb.Unmarshal(ginCtx.Request.Body, request)
			if err != nil {
				ginCtx.AbortWithError(400, err)
				return
			}
			request.Id = ginCtx.Param("id")
			err = protogingen.ApplyMiddlewareList(reqCtx, middleware, func(ctx context.Context) error {
				response, err := f(ctx, request)
				if err != nil {
					return err
				}
				responseString, err = (&jsonpb.Marshaler{}).MarshalToString(response)
				if err != nil {
					return err
				}
				return nil
			})
			if err != nil {
				ginCtx.AbortWithError(500, err)
				return
			}
			ginCtx.Status(200)
			ginCtx.Writer.WriteString(responseString)
		})
	}
}
